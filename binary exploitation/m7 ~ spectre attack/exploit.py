from pwn import *

def piu_frequente(arr):
    # Creiamo un dizionario per contare la frequenza dei caratteri
    n_car = {}

    for c in arr:
        if c in n_car:
            n_car[c] += 1
        else:
            n_car[c] = 1

    max_car = None
    max = 0

    for c, f in n_car.items():
        if f > max:
            max = f
            max_car = c

    return max_car

# Run with: python example.py

# Environment variables (if needed)
env = {
    "DEBUG": "1"
}

PLAINTEXT = ""
KEY = []
flag_l = 4125
init_key = 4095
faster_ids = -1
result = ""

for i in range (128):
  PLAINTEXT += 'A'

while(faster_ids != 0 and init_key<=flag_l):
  init_key = init_key +1
  KEY = []
  tmp = []
  for i in range(128):
    KEY.append(init_key)

  for i in range(50):
    faster = 1000000000



# Check length of the plaintext is equal to the length of the key
    assert len(PLAINTEXT) == len(KEY)
# Run the program
    c = process("./mission7", env=env)
# Wait until the program prints "Plaintext:"
    c.recvuntil(b"Plaintext:")
# Send plaintext
    c.sendline(PLAINTEXT.encode())
# Send key
    for key_i in KEY:
      c.recvuntil(b":")
      c.sendline(str(key_i).encode())
# If debug is active
    if "DEBUG" in env.keys():
      cycles = []
      for _ in range(256):
        line = c.recvuntil(b"\n")
        cycles.append(int(line.split(b": ")[1].split(b" ")[0]))
#    print(cycles)
      for i in range(len(cycles)):
            if cycles[i] < faster:
                faster_idx = i
                faster = cycles[i]
#    print(init_key)
#    print(init_key, faster_idx, chr(faster_idx))

    tmp += chr(faster_idx)
    c.close()
  result += piu_frequente(tmp)
# Received cyphertext
#  c.recvuntil(b"Ciphertext: ")
#  ciphertext = c.recvuntil(b"\n").split(b"\n")[0]
print(result)
# Close program

